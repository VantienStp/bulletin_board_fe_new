const fs = require("fs");
const path = require("path");

// üßπ Danh s√°ch th∆∞ m·ª•c c·∫ßn b·ªè qua
const ignoreDirs = ["node_modules", ".git", "dist", "build", ".next", ".vscode", "coverage", "out"];

/**
 * H√†m 1Ô∏è‚É£: Hi·ªÉn th·ªã ch·ªâ C√ÅC TH∆Ø M·ª§C
 */
function showFolders(dir, prefix = "") {
  const items = fs.readdirSync(dir, { withFileTypes: true });

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    if (item.isDirectory()) {
      if (ignoreDirs.includes(item.name)) continue;
      console.log(prefix + "üìÅ " + item.name);
      showFolders(path.join(dir, item.name), prefix + "   ");
    }
  }
}

/**
 * H√†m 2Ô∏è‚É£: Hi·ªÉn th·ªã C·∫¢ TH∆Ø M·ª§C V√Ä FILE
 */
function showFoldersAndFiles(dir, prefix = "") {
  const items = fs.readdirSync(dir, { withFileTypes: true });

  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    const isLast = i === items.length - 1;
    const connector = isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ";
    const subPrefix = isLast ? "    " : "‚îÇ   ";

    if (item.isDirectory()) {
      if (ignoreDirs.includes(item.name)) continue;
      console.log(prefix + connector + "üìÅ " + item.name);
      showFoldersAndFiles(path.join(dir, item.name), prefix + subPrefix);
    } else {
      console.log(prefix + connector + "üìÑ " + item.name);
    }
  }
}

// üèÅ L·∫•y ƒë·ªëi s·ªë t·ª´ command line
// C√∫ ph√°p: node tree.js [ƒë∆∞·ªùng_d·∫´n] [mode]
const startDir = process.argv[2] || "./";
const mode = process.argv[3] || "both"; // "folders" ho·∫∑c "both"

// üîÑ Ghi k·∫øt qu·∫£ v√†o file
const originalConsoleLog = console.log;
const output = [];
console.log = (...args) => output.push(args.join(" "));

if (mode === "folders") {
  showFolders(startDir);
} else {
  showFoldersAndFiles(startDir);
}

console.log = originalConsoleLog;
fs.writeFileSync("tree.txt", output.join("\n"), "utf8");

console.log(`‚úÖ ƒê√£ t·∫°o c√¢y th∆∞ m·ª•c (${mode === "folders" ? "ch·ªâ th∆∞ m·ª•c" : "th∆∞ m·ª•c + file"}) trong tree.txt`);

// node tree.js ./src folders (for run)
// node tree.js ./src both (for run)