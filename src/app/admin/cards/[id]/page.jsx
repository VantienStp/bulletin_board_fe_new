'use client';
import { useEffect, useState } from 'react';
import { FaClone, FaEye, FaPlusSquare, FaEdit, FaTrash } from 'react-icons/fa';
import Link from 'next/link';
import Modal from '@/components/admin/Modal';
import { API_BASE_URL, BASE_URL } from '@/lib/api';
import { useParams } from 'next/navigation';
import "./card-detail.css";
import { authFetch, getToken } from '@/lib/auth';

export default function CardDetailPage() {
	const [card, setCard] = useState(null);
	const [editingContent, setEditingContent] = useState(null);
	const [formData, setFormData] = useState({ type: 'image', url: '', description: '', qrCode: '' });
	const [showForm, setShowForm] = useState(false);
	const { id } = useParams();

	useEffect(() => {
		fetchCard();
	}, [id]);

	async function fetchCard() {
		try {
			const res = await fetch(`${API_BASE_URL}/cards/${id}`);
			const data = await res.json();
			setCard(data);
		} catch (err) {
			console.error('‚ùå L·ªói khi t·∫£i chi ti·∫øt th·∫ª:', err);
		}
	}

	async function handleSubmit(e) {
		e.preventDefault();
		const token = getToken();
		if (!card) return;

		const finalData = JSON.parse(JSON.stringify(formData));

		// üß† N·∫øu ng∆∞·ªùi d√πng ch·ªçn file m·ªõi cho url ‚Üí upload l√™n BE tr∆∞·ªõc
		if (formData.url instanceof File) {
			const fd = new FormData();
			fd.append("file", formData.url);

			const uploadRes = await authFetch(`${API_BASE_URL}/files/upload`, {
				method: "POST",
				body: fd,
			});

			const uploadData = await uploadRes.json();

			if (uploadRes.ok && uploadData.url) {
				// ‚úÖ L∆∞u link file
				finalData.url = uploadData.url;
				finalData.type = uploadData.type || formData.type;

				// ‚úÖ T·ª± ƒë·ªông l·∫•y ·∫£nh QR t·ª´ BE (·∫£nh base64) ƒë·ªÉ l∆∞u v√†o card
				finalData.qrCode = uploadData.qrImage || uploadData.qrLink || "";
			} else {
				console.error("‚ùå Upload th·∫•t b·∫°i:", uploadData);
				alert("‚ùå Upload th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
				return;
			}
		}

		// üß© G·ª≠i d·ªØ li·ªáu n·ªôi dung (t·∫°o m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
		const method = editingContent !== null ? "PUT" : "POST";
		const url = editingContent !== null
			? `${API_BASE_URL}/cards/${id}/contents/${editingContent}`
			: `${API_BASE_URL}/cards/${id}/contents`;

		try {
			const res = await authFetch(url, {
				method,

				body: JSON.stringify(finalData),
			});

			if (res.ok) {
				alert(editingContent !== null ? "‚úÖ ƒê√£ c·∫≠p nh·∫≠t n·ªôi dung" : "‚úÖ ƒê√£ th√™m n·ªôi dung m·ªõi");
				setShowForm(false);
				setEditingContent(null);
				fetchCard();
			} else {
				const msg = await res.text();
				console.error("‚ùå Server response:", msg);
				alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
			}
		} catch (err) {
			console.error("‚ùå L·ªói khi l∆∞u:", err);
			alert("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu l√™n server");
		}
	}

	async function handleDeleteContent(index) {
		if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a n·ªôi dung n√†y?')) return;
		const token = getToken();
		try {
			const res = await authFetch(`${API_BASE_URL}/cards/${id}/contents/${index}`, {
				method: 'DELETE',

			});
			if (res.ok) {
				alert('‚úÖ ƒê√£ x√≥a n·ªôi dung');
				fetchCard();
			} else {
				alert('‚ùå X√≥a th·∫•t b·∫°i');
			}
		} catch (err) {
			console.error('‚ùå L·ªói khi x√≥a n·ªôi dung:', err);
		}
	}

	function getFullUrl(path) {
		if (!path) return null; // tr√°nh c·∫£nh b√°o khi path r·ªóng
		if (path.startsWith("http")) return path;
		return `${BASE_URL.replace(/\/$/, "")}/${path.replace(/^\/+/, "")}`;
	}

	function handleEditContent(index) {
		const content = card.contents[index];
		setEditingContent(index);
		setFormData({
			type: content.type || 'image',
			url: content.url || '',
			description: content.description || '',
			qrCode: content.qrCode || ''
		});
		setShowForm(true);
	}

	if (!card) return <p>ƒêang t·∫£i...</p>;

	return (
		<div className="admin-page">
			<div className="page-header">
				<h2><FaClone /> Chi ti·∫øt th·∫ª</h2>
				<button
					className="btn-primary"
					onClick={() => {
						setEditingContent(null);
						setFormData({ type: 'image', url: '', description: '', qrCode: '' });
						setShowForm(true);
					}}
				>
					<FaPlusSquare /> Th√™m n·ªôi dung
				</button>
			</div>

			<table className="admin-table table-cards-detail">
				<thead>
					<tr>
						<th>Lo·∫°i</th>
						<th>File / H√¨nh ·∫£nh</th>
						<th>M√¥ t·∫£</th>
						<th>QR Code</th>
						<th>H√†nh ƒë·ªông</th>
					</tr>
				</thead>
				<tbody>
					{card.contents.map((c, i) => (
						<tr key={i}>
							<td>{c.type}</td>
							<td>
								{c.type === 'image' && c.url && <img src={getFullUrl(c.url)} alt="" width="100" />}
								{c.type === 'video' && c.url && <video src={getFullUrl(c.url)} controls width="150" />}
								{c.type === 'pdf' && c.url && <iframe src={getFullUrl(c.url)} width="150" height="100" />}
							</td>
							<td>{c.description || '‚Äî'}</td>
							<td>
								{c.qrCode ? (
									c.qrCode.startsWith("data:image")
										? <img src={c.qrCode} alt="QR" width="80" />
										: <img src={getFullUrl(c.qrCode)} alt="QR" width="80" />
								) : "‚Äî"}
							</td>
							<td>
								{c.url && (
									<Link href={getFullUrl(c.url)} target="_blank" className="btn-view">
										<FaEye /> Xem
									</Link>
								)}
								<button className="btn-edit" onClick={() => handleEditContent(i)}>
									<FaEdit /> S·ª≠a
								</button>
								<button className="btn-delete" onClick={() => handleDeleteContent(i)}>
									<FaTrash /> X√≥a
								</button>
							</td>
						</tr>
					))}
				</tbody>
			</table>

			{showForm && (
				<Modal
					title={editingContent !== null ? 'S·ª≠a n·ªôi dung' : 'Th√™m n·ªôi dung m·ªõi'}
					onClose={() => setShowForm(false)}
					width="500px"
				>
					<form onSubmit={handleSubmit}>
						<label>Lo·∫°i</label>
						<select
							value={formData.type}
							onChange={(e) => setFormData({ ...formData, type: e.target.value })}
						>
							<option value="image">Image</option>
							<option value="video">Video</option>
							<option value="pdf">PDF</option>
						</select>

						<label>URL h√¨nh ·∫£nh / file</label>
						<div className="upload-row">
							<input
								type="text"
								placeholder="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ho·∫∑c ch·ªçn file..."
								value={formData.url instanceof File ? formData.url.name : formData.url}
								onChange={(e) => setFormData({ ...formData, url: e.target.value })}
							/>
							<input
								type="file"
								accept={
									formData.type === 'video'
										? 'video/*'
										: formData.type === 'pdf'
											? 'application/pdf'
											: 'image/*'
								}
								onChange={(e) => {
									const file = e.target.files[0];
									if (file) setFormData({ ...formData, url: file });
								}}
							/>
						</div>

						<label>M√¥ t·∫£</label>
						<textarea
							value={formData.description}
							onChange={(e) => setFormData({ ...formData, description: e.target.value })}
							placeholder="Nh·∫≠p m√¥ t·∫£..."
						/>

						<label>QR Code (t·ª± ƒë·ªông sinh t·ª´ file)</label>
						<input
							type="text"
							value={formData.qrCode || ''}
							readOnly
							placeholder="QR s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông sau khi upload"
						/>

						<div className="modal-actions">
							<button type="submit" className={`btn-primary ${editingContent !== null ? 'btn-warning' : ''}`}>
								{editingContent !== null ? 'C·∫≠p nh·∫≠t' : 'L∆∞u'}
							</button>
							<button type="button" className="btn-cancel" onClick={() => setShowForm(false)}>
								H·ªßy
							</button>
						</div>
					</form>
				</Modal>
			)}
		</div>
	);
}
