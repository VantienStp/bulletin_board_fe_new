// verifiy-password page
"use client";
import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { API_BASE_URL, BASE_URL } from "@/lib/api";

export default function VerifyPinPage() {
  const [pin, setPin] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  // Theo d√µi tr·∫°ng th√°i c·ªßa b·ªô g√µ (Composition)
  const [isComposing, setIsComposing] = useState(false); 

  const router = useRouter();
  const params = useSearchParams();
  const email = params.get("email");

  const handleVerify = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");

    if (pin.length < 6) {
      setMessage("‚ùå M√£ PIN ph·∫£i ƒë·ªß 6 ch·ªØ s·ªë.");
      setLoading(false);
      return;
    }

    try {
      const res = await fetch(`${API_BASE_URL}/auth/verify-pin`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify({ email, pin }),
      });
      
      const data = await res.json();
      console.log(data)
      if (!res.ok) throw new Error(data.message || "M√£ PIN kh√¥ng h·ª£p l·ªá");

      const { userEmailForDisplay } = data;
      sessionStorage.setItem("userEmailForDisplay", userEmailForDisplay || email);

      setMessage("‚úÖ M√£ PIN h·ª£p l·ªá! ƒêang chuy·ªÉn sang b∆∞·ªõc ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u...");
      setTimeout(() => {
        router.push(`/reset-password`);
      }, 1500);
    } catch (err) {
      setMessage("‚ùå " + (err.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh."));
    } finally {
      setLoading(false);
    }
  };

  const updatePinAtIndex = (index, value) => {
    const currentPinArray = Array.from({ length: 6 }, (_, i) => pin[i] || "");
    currentPinArray[index] = value;
    setPin(currentPinArray.join(""));
  };
  
  // --- H√†m H·ªó Tr·ª£ Focus v√† Composition ---

  const focusNextInput = (currentElement, currentIndex) => {
    const nextInput = currentElement.parentElement.querySelector(`.pin-box:nth-child(${currentIndex + 2})`);
    if (nextInput) {
        nextInput.focus();
    }
  };

  const handleCompositionStart = () => {
    setIsComposing(true);
  };

  const handleCompositionEnd = (e, i) => {
    setIsComposing(false);
    
    // Sau khi k·∫øt th√∫c Composition, ƒë·∫£m b·∫£o gi√° tr·ªã cu·ªëi c√πng ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    const val = e.target.value.replace(/\D/g, "");
    if (val) {
        const finalChar = val.substring(0, 1);
        updatePinAtIndex(i, finalChar);

        // üîë FIX L·ªñI GHOSTING: D√πng setTimeout(..., 0) ƒë·ªÉ ƒë·∫©y l·ªánh chuy·ªÉn focus
        // v√†o cu·ªëi event loop.
        setTimeout(() => {
            focusNextInput(e.target, i);
        }, 0);
    }
  };
  
  const handleFocus = (e, i) => {
    // T√¨m √¥ ƒë·∫ßu ti√™n tr·ªëng v√† chuy·ªÉn focus ƒë·∫øn ƒë√≥ (n·∫øu kh√¥ng ph·∫£i √¥ hi·ªán t·∫°i)
    const firstEmptyIndex = pin.split('').findIndex(char => !char);
    if (firstEmptyIndex !== -1 && firstEmptyIndex !== i) {
        e.preventDefault();
        const targetInput = e.currentTarget.parentNode.querySelector(`.pin-box:nth-child(${firstEmptyIndex + 1})`);
        if(targetInput) targetInput.focus();
        return;
    }
  }

  const handlePinChange = (e, i) => {
    const val = e.target.value.replace(/\D/g, "");

    if (!val) {
      updatePinAtIndex(i, "");
      return;
    }

    const singleChar = val.substring(0, 1);
    updatePinAtIndex(i, singleChar);

    if (!isComposing) {
        setTimeout(() => {
            focusNextInput(e.target, i);
        }, 0); 
    } 
  };
  
  const handlePinKeyDown = (e, i) => {
    // X·ª≠ l√Ω ph√≠m Backspace
    if (e.key === "Backspace") {
      // 1. N·∫øu √¥ hi·ªán t·∫°i c√≥ k√Ω t·ª±, x√≥a k√Ω t·ª± ƒë√≥
      if (pin[i]) {
        e.preventDefault(); 
        updatePinAtIndex(i, "");
      }
      // 2. N·∫øu √¥ hi·ªán t·∫°i tr·ªëng V√Ä c√≥ √¥ tr∆∞·ªõc ƒë√≥, chuy·ªÉn focus v·ªÅ √¥ tr∆∞·ªõc ƒë√≥ V√Ä x√≥a k√Ω t·ª± ·ªü √¥ ƒë√≥
      else if (e.target.previousSibling) {
        e.preventDefault();
        e.target.previousSibling.focus();
        updatePinAtIndex(i - 1, "");
      }
      return;
    }
    
    // X·ª≠ l√Ω ph√≠m M≈©i t√™n (t√πy ch·ªçn)
    if (e.key === "ArrowRight" && e.target.nextSibling) {
      e.target.nextSibling.focus();
    } else if (e.key === "ArrowLeft" && e.target.previousSibling) {
      e.target.previousSibling.focus();
    }
  };

  return (
    <div className="auth-wrapper">
      <img
        src={`${BASE_URL}/uploads/blob-scene.svg`}
        alt="background shape"
        className="background-shape"
      />

      <div className="auth-card">
        <h1>X√°c minh m√£ PIN</h1>
        <p>
          Nh·∫≠p m√£ 6 ch·ªØ s·ªë ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email: <b>{email}</b>
        </p>

        {message && <div className="message-box">{message}</div>}

        <form onSubmit={handleVerify}>
          <label>M√£ PIN</label>

          <div className="pin-inputs">
            {Array.from({ length: 6 }, (_, i) => (
              <input
                key={i}
                type="text"
                maxLength={1}
                inputMode="numeric"
                className="pin-box"
                value={pin[i] || ""}
                onChange={(e) => handlePinChange(e, i)} 
                onKeyDown={(e) => handlePinKeyDown(e, i)}
                onFocus={(e) => handleFocus(e, i)} 
                onCompositionStart={handleCompositionStart}
                onCompositionEnd={(e) => handleCompositionEnd(e, i)}
                onPaste={(e) => {
                  e.preventDefault();
                  const pastedData = e.clipboardData.getData('text').replace(/\D/g, '').substring(0, 6);
                  setPin(pastedData);
                  
                  // T·ªëi ∆∞u focus sau khi d√°n
                  if (pastedData.length > 0) {
                      const nextIndex = pastedData.length - 1;
                      const inputElements = e.currentTarget.parentNode.querySelectorAll('.pin-box');
                      
                      const focusIndex = Math.min(nextIndex + 1, 5); 
                      if (inputElements[focusIndex]) {
                          inputElements[focusIndex].focus();
                      }
                  }
                }}
              />
            ))}
          </div>

          <button type="submit" disabled={loading || pin.length < 6}>
            {loading ? "ƒêang x√°c minh..." : "X√°c nh·∫≠n m√£ PIN"}
          </button>
        </form>

        <p className="redirect-text">
          Ch∆∞a nh·∫≠n ƒë∆∞·ª£c m√£?{" "}
          <a href={`/forgot-password?email=${email}`}>G·ª≠i l·∫°i</a>
        </p>
      </div>
    </div>
  );
}